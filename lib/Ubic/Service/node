# vim:ft=perl

use strict;
use warnings;

use parent qw(Ubic::Multiservice);
use Params::Validate;
use Ubic::Daemon qw(:all);
use Ubic::Service::Common;
use Ubic::Logger;
use File::Spec;

my $LOG_DIR    = "~/ubic-nodejs/t/var/log/node.d";
my $PID_DIR    = "~/ubic-nodejs/t/var/run/node.d";
my $CONFIG_DIR = "~/ubic-nodejs/t/etc/node.d";
my $USER       = "www-data";

sub new
{
    return bless {} => shift;
}

sub simple_service
{
    my ( $self, $name ) = @_;
    my $pidfile = "$PID_DIR/$name.pid";

    my $service = Ubic::Service::Common->new({

       start => sub {

                my $APPDIR    = '~/ubic-ndoejs/t/bin';
                my $APP       = 'app.js';
                my $NODE_USER = 'www-data';
                my $NODE_BIN  = '/usr/bin/node';
                my $NODE_ARGS = '';

                start_daemon(
                    {
                        bin          => "$NODE_BIN $NODE_ARGS $APPDIR/$APP",
                        pidfile      => $pidfile,
                        term_timeout => 5,
                        stdout       => "$LOG_DIR/nodejs.$name.log",
                        stderr       => "$LOG_DIR/nodejs.$name.err.log",
                        ubic_log     => "$LOG_DIR/nodejs.$name.ubic.log",
                    }
                );

      },

      stop => sub {
                stop_daemon( $pidfile, { timeout => 5 } );
      },

      # TODO generate own status sub
      status => sub {
                my $running = check_daemon($pidfile);
                return 'not running' unless ($running);
                return 'running';
      },

      user => $USER || 'root',
      timeout_options => {
                start => { trials => 15, step => 0.1 },
                stop  => { trials => 15, step => 0.1 }
      },

      }
    );

    $service->name($name);
    return $service;
}

sub has_simple_service
{
    my ( $self, $name ) = @_;
    return -f "$CONFIG_DIR/${name}";
}

sub service_names
{
    my ($self) = @_;
    my @configs = glob("$CONFIG_DIR/*");
    return
      grep { /^[\w-]+$/ }
      map { File::Spec->abs2rel( $_, $CONFIG_DIR ) } @configs;
}

return __PACKAGE__->new;

